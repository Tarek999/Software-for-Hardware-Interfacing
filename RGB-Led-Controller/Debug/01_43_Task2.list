
01_43_Task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000026c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000400  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000400  08000400  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000400  08000400  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000408  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800040c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800040c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000154a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000536  00000000  00000000  0002157e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00021c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e174  00000000  00000000  00021df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001cf8  00000000  00000000  0002ff64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dec6  00000000  00000000  00031c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000afb22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000528  00000000  00000000  000afb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e8 	.word	0x080003e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003e8 	.word	0x080003e8

080001d4 <main>:
#include "stm32f401cc_interface.h"


int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0

  	RCC_AHB1ENR |= (1 << 1) ;                                                   // Enable peripheral register port B
 80001da:	4b32      	ldr	r3, [pc, #200]	; (80002a4 <main+0xd0>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a31      	ldr	r2, [pc, #196]	; (80002a4 <main+0xd0>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOB_MODER &= ~(0x03<<(2*3));	                                            // pin 3 input
 80001e6:	4b30      	ldr	r3, [pc, #192]	; (80002a8 <main+0xd4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a2f      	ldr	r2, [pc, #188]	; (80002a8 <main+0xd4>)
 80001ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001f0:	6013      	str	r3, [r2, #0]
    GPIOB_MODER &= ~((0x03<<(2*5))|(0x03<<(2*6))|(0x03<<(2*7)));                // reset pins (5,6,7)
 80001f2:	4b2d      	ldr	r3, [pc, #180]	; (80002a8 <main+0xd4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a2c      	ldr	r2, [pc, #176]	; (80002a8 <main+0xd4>)
 80001f8:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (0x01<<(2*5))|(0x01<<(2*6))|(0x01<<(2*7)); 					// LED Pins (5,6,7) output
 80001fe:	4b2a      	ldr	r3, [pc, #168]	; (80002a8 <main+0xd4>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a29      	ldr	r2, [pc, #164]	; (80002a8 <main+0xd4>)
 8000204:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000208:	6013      	str	r3, [r2, #0]
	GPIOB_OTYPER &= ~((0x03<<5)|(0x01<<6)|(0x01<<7)); 							// Pins output type (5,6,7) Push-Pull
 800020a:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <main+0xd4>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	4a26      	ldr	r2, [pc, #152]	; (80002a8 <main+0xd4>)
 8000210:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000214:	6053      	str	r3, [r2, #4]
    GPIOB_PUPDR &= ~(0x03<<(2*3));                                              // reset pin 3
 8000216:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <main+0xd4>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <main+0xd4>)
 800021c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000220:	60d3      	str	r3, [r2, #12]
	GPIOB_PUPDR |= (0x01<<(2*3));                                               // pin 3 pull up (active low)
 8000222:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <main+0xd4>)
 8000224:	68db      	ldr	r3, [r3, #12]
 8000226:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <main+0xd4>)
 8000228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800022c:	60d3      	str	r3, [r2, #12]
    int delay ;
    unsigned int Pushbutton_value ;

      while (1) {
    	  for(delay = 0 ; delay<50000 ;delay++)                          //check if the button is pressed for 50ms
 800022e:	2300      	movs	r3, #0
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e00b      	b.n	800024c <main+0x78>
    	                  {
    		  Pushbutton_value = ((GPIOB_IDR>>3)&1);
 8000234:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <main+0xd4>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	08db      	lsrs	r3, r3, #3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	603b      	str	r3, [r7, #0]
    	                      if(Pushbutton_value == 1)break;
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	2b01      	cmp	r3, #1
 8000244:	d008      	beq.n	8000258 <main+0x84>
    	  for(delay = 0 ; delay<50000 ;delay++)                          //check if the button is pressed for 50ms
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3301      	adds	r3, #1
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000252:	4293      	cmp	r3, r2
 8000254:	ddee      	ble.n	8000234 <main+0x60>
 8000256:	e000      	b.n	800025a <main+0x86>
    	                      if(Pushbutton_value == 1)break;
 8000258:	bf00      	nop
    	                  }
    	  if(((GPIOB_IDR>>3)&1) == 0)
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <main+0xd4>)
 800025c:	691b      	ldr	r3, [r3, #16]
 800025e:	08db      	lsrs	r3, r3, #3
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d119      	bne.n	800029c <main+0xc8>
    	          {


    	                  if(((GPIOB_ODR>>5)&7) <7)
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <main+0xd4>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	095b      	lsrs	r3, r3, #5
 800026e:	f003 0307 	and.w	r3, r3, #7
 8000272:	2b06      	cmp	r3, #6
 8000274:	d805      	bhi.n	8000282 <main+0xae>
    	                  {
    	                      GPIOB_ODR+=1<<5;
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <main+0xd4>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <main+0xd4>)
 800027c:	3320      	adds	r3, #32
 800027e:	6153      	str	r3, [r2, #20]
 8000280:	e00c      	b.n	800029c <main+0xc8>
    	                  }
    	                  else
    	                  {
    	                      GPIOB_ODR&=~(7<<5);
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <main+0xd4>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a08      	ldr	r2, [pc, #32]	; (80002a8 <main+0xd4>)
 8000288:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800028c:	6153      	str	r3, [r2, #20]
    	                  }

    	          }

    	          while(Pushbutton_value == 0)
 800028e:	e005      	b.n	800029c <main+0xc8>
    	          {
    	        	  Pushbutton_value = ((GPIOB_IDR>>3)&1);
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <main+0xd4>)
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	08db      	lsrs	r3, r3, #3
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	603b      	str	r3, [r7, #0]
    	          while(Pushbutton_value == 0)
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f6      	beq.n	8000290 <main+0xbc>
    	  for(delay = 0 ; delay<50000 ;delay++)                          //check if the button is pressed for 50ms
 80002a2:	e7c4      	b.n	800022e <main+0x5a>
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020400 	.word	0x40020400

080002ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <NMI_Handler+0x4>

080002b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <HardFault_Handler+0x4>

080002b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <MemManage_Handler+0x4>

080002be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <BusFault_Handler+0x4>

080002c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <UsageFault_Handler+0x4>

080002ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002f8:	f000 f83e 	bl	8000378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <SystemInit+0x20>)
 8000306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <SystemInit+0x20>)
 800030c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800035c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800032a:	490e      	ldr	r1, [pc, #56]	; (8000364 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0b      	ldr	r2, [pc, #44]	; (800036c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000340:	4c0b      	ldr	r4, [pc, #44]	; (8000370 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800034e:	f7ff ffd7 	bl	8000300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000352:	f000 f825 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000356:	f7ff ff3d 	bl	80001d4 <main>
  bx  lr    
 800035a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800035c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000368:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 800036c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000370:	20000024 	.word	0x20000024

08000374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_IncTick+0x20>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <HAL_IncTick+0x24>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4413      	add	r3, r2
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <HAL_IncTick+0x24>)
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000
 800039c:	20000020 	.word	0x20000020

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	; (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	; (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	; (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	; (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
